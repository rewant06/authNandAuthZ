generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum AuditAction {
  AUTH_LOGIN_ATTEMPT
  AUTH_LOGIN_SUCCESS
  AUTH_LOGIN_FAILED
  AUTH_LOGIN_LOCKED
  AUTH_REFRESH_REUSED
  AUTH_REFRESH_REUSE_DETECTED
  AUTH_REFRESH_SUCCESS
  PASSWORD_RESET_REQUEST
  PASSWORD_RESET_SUCCESS
  PASSWORD_RESET_FAILED
  AUTH_REFRESH_REVOKE
}

model User {
  id             String         @id @default(cuid())
  email          String         @unique
  name           String?
  role           Role           @default(USER)
  hashedPassword String?
  auditEvents    AuditEvent[]
  refreshTokens  RefreshToken[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model AuditEvent {
  id        String      @id @default(cuid())
  userId    String?
  user      User?       @relation(fields: [userId], references: [id])
  email     String?
  action    AuditAction
  success   Boolean     @default(false)
  reason    String?
  ip        String?
  device    String?
  meta      Json?
  timestamp DateTime    @default(now())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([action, createdAt])
  @@index([success, createdAt])
}

model RefreshToken {
  id         Int       @id @default(autoincrement())
  tokenHash  String
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  createdAt  DateTime  @default(now())
  expiresAt  DateTime
  revokedAt  DateTime?
  revoked    Boolean   @default(false)
  device     String?
  replacedBy Int? // to store id of replacing token
  lastUsedAt DateTime?
}
